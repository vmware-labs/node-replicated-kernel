[package]
name = "nrk"
version = "0.0.3"
authors = [
  "Gerd Zellweger <mail@gerdzellweger.com>",
]

description = "Experimental OS kernel"
readme = "README.md"
license = "MIT OR Apache-2.0"
build = "build.rs"
edition = "2018"
resolver = "2"


[dependencies]
# Our own dependencies:
apic = { path = "../lib/apic/" }
node-replication = { path = "../lib/node-replication/nr" }
cnr = { path = "../lib/node-replication/cnr" }
kpi = { path = "../lib/kpi" }
vmxnet3 = { path = "../lib/vmxnet3" }
bootloader_shared = { path = "../lib/bootloader_shared" }
x86 = "0.40"
klogger = "0.0.7"
driverkit = "0.8"
spin = "0.9.1"
elfloader = "0.14"
slabmalloc = "0.10"
backtracer_core = "0.0.4"
rawtime = "0.0.4"
libacpica = "0.0.6"
atopology = "0.0.17"
# External libraries we use:
log = "0.4"
lazy_static = { version = "1.4", features = ["spin_no_std"] }
logos = { version = "0.12", default-features = false, features = ["export_derive"] }
hashbrown = { version = "0.11", features = [ "nightly" ] }
cstr_core = { version = "0.2.3", default-features = false }
uefi = "0.11.0"
crossbeam-utils = { version = "0.8.0", default-features = false }
static_assertions = "1.1.0"
bit_field = "0.10"
crossbeam-queue = { version = "0.3", default-features = false, features = ["alloc"] }
addr2line = { version = "0.15", default-features = false, features = ["rustc-demangle"], optional = true }
gimli = { version = "0.25", default-features = false, features = ["read", "endian-reader"] }
arrayvec = { version = "0.7.0", default-features = false }
memoffset = { version = "0.6", features = ["unstable_const"] }
smoltcp = { version = "0.7.1", default-features = false, features = [ "alloc", "log", "proto-ipv4", "proto-igmp", "proto-dhcpv4", "socket-raw", "socket-icmp", "socket-udp", "socket-tcp" ], optional = true }
fallible_collections = { git = "https://github.com/gz/fallible_collections.git", branch = "allocator_api", features = ["unstable"] }

[[bin]]
name = "nrk"
path = "src/main.rs"

[target.'cfg(target_os = "none")'.dependencies]
serde = { version = "1", default-features = false, features = ["alloc", "derive"], optional = true }
serde_cbor = { version = "0.11", default-features = false, optional = true }

[target.'cfg(not(target_os = "none"))'.dependencies]
libc = { version = "0.2.53", default-features = false }
csv = "1.1"
serde = { version = "1" }
serde_cbor = { version = "0.11" }
rand = { version = "0.8", features = ["small_rng"] }
ctor = "0.1.20"

[target.'cfg(not(target_os = "none"))'.dev-dependencies]
rexpect = "0.4"
proptest = "1.0.0"
hwloc2 = "2.2"
env_logger = "0.9"

[build-dependencies]
cc = "1.0"

[features]
default = ["addr2line", "serde", "serde_cbor"]
# Run an integration test instead of standard kernel main function
integration-test = []
# smoke: Shorten long running benchmarks to test just functionality
smoke = []
# baremetal: Compile benchmarks for running on bare-metal
baremetal = []
# pre-alloc guest memory: For serious benchmarking where we want to avoid VM exits as much as possible
prealloc = []
# Don't boot entire system. only initialize bsp core
bsp-only = []
# exit: test qemu exit functionality (used heavily for CI)
test-exit = ["integration-test", "bsp-only"]
# wrgsbase: Test wrgsbase performance
test-wrgsbase = ["integration-test", "bsp-only"]
# pfault-early: test page-fault handler early on during init
test-pfault-early = ["integration-test", "bsp-only"]
# gpfault-early: test general protection fault handler early on during init
test-gpfault-early = ["integration-test", "bsp-only"]
# pfault: test page-fault handler
test-pfault = ["integration-test", "bsp-only"]
# gpfault: test general protection fault handler
test-gpfault = ["integration-test", "bsp-only"]
# double_fault: test double fault handler
test-double-fault = ["integration-test", "bsp-only"]
# alloc: testÂ memory allocation
test-alloc = ["integration-test", "bsp-only"]
# sse: test SIMD register are usable
test-sse = ["integration-test", "bsp-only"]
# test time
test-time = ["integration-test", "bsp-only"]
# test apic timer
test-timer = ["integration-test", "bsp-only"]
# acpi: test ACPI can initialize
test-acpi-smoke = [ "integration-test", "bsp-only" ]
# acpi: test ACPI with complex topology
test-acpi-topology = [ "integration-test", "bsp-only" ]
# coreboot_smoke: Test APIs to boot-up additional cores
test-coreboot-smoke = ["integration-test", "bsp-only" ]
# coreboot_nrlog: Test APIs to boot-up additional cores and communicate using nr
test-coreboot-nrlog = ["integration-test", "bsp-only" ]
# coreboot: Test core booting logic (during actual system initialization)
test-coreboot = ["integration-test" ]
# userspace: run a test in user-space by spawning the init process
test-userspace = ["integration-test", "bsp-only"]
# userspace_smp: Test that we can dispatch a process on multiple cores
test-userspace-smp = ["integration-test"]
# vspace_debug: print initial vspace in graphviz format
test-vspace-debug = ["integration-test", "bsp-only"]
# test-shootdown: Test simple TLB shootdown
test-shootdown-simple = ["integration-test"]
# test-replica-advance: Test advancing replica
test-replica-advance = ["integration-test"]
# test-vmxnet-smoke: Test vmxnet NIC driver
test-vmxnet-smoke = ["integration-test"]
# test-vmxnet-smoltcp: Test vmxnet NIC driver with a network stack
test-vmxnet-smoltcp = ["integration-test", "smoltcp"]